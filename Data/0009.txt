예전에 한번 실리콘밸리 쪽에 있는 신생 모바일 회사에 비행기를 타고 면접을 보러 간 적이 있어요. 7시간 정도 본 것 같아요... 면접관도 한 번에 한 명씩 6~7명 정도 들어왔고. 
그런데 마지막에 들어온 면접관이 질문을 하는데 굉장히 비현실적인 내용의 질문을 많이 하더라고요. '우리가 이런 게임이 있는데 만약에 이 게임에서 아이템을 백만 개 정도를 집어넣고, 그걸 조합하려면 어떻게 할 거냐? 이 자료구조를 짜 봐라'라는 질문을 하길래 '일단 게임 디자인이 그렇게 나오는 건 말도 안 되기 때문에 솔직히 생각해 볼 필요도 없는 문제지만, 나라면 이런 식으로 해서 이런 자료구조를 짜겠다. 하지만 여전히 말했듯이 이건 전혀 필요 없는 자료구조다'라는 식으로 얘기를 했어요. 프로그래머라면 벡터(vector) 그러니까 배열(array)이 빠르냐, 해시 맵(hash map)이 빠르냐 이런 개념들을 배우셨을 거예요. 그런데 면접관이 그런 거를 계속 따지고 들어가려 해서 저는 어떻게 답변을 했냐면은 '이런 문제에서 이론적으로는 당연히 해시 맵(hash map)을 쓰는 게 빠르지만, 지금 당신이 만들려고 하는 게임의 하드웨어에서는 '벡터(vector)나 배열(array)을 쓰는 게 제일 빠르다'라고 말했는데 그 말을 이해를 못 하더라고요.

아무튼 그렇게 면접이 끝나고 밴쿠버로 돌아왔고 며칠 뒤에 연락이 와서 채용을 하겠대요. 봉급도 굉장히 높았어요. 근데 제가 가지 않겠다 그랬어요. 그러니깐 왜 안 오냐고 물었는데, 저랑 마지막으로 면접을 봤던 사람이 CTO(Chief Technical Officer)에요. 프로그래머들 중의 최고 직책인데, 저는 그런 사람이 자기가 게임을 만드는 하드웨어조차 제대로 이해를 못 하고 있다는 게 되게 놀라웠어요. 최근에 모던 하드웨어를 보면 캐시(cache) 같은 부분 때문에 웬만한 경우에서는 해시 맵(hash map)보다는 배열(array)을 쓰는 게 훨씬 빨라요. 그리고 그때 그 회사에 이상하게 만들어 놓은 플랫폼이 있었는데 CTO라는 사람은 그런 거 조차 모르고 있더라고요. 그 CTO라는 사람도 저한테 '왜 안 오냐'고 또 물어봐서 
'거기 들어가기엔 내 실력이 아까워서 못 가겠다'라는 식으로 되게 거만하게 말을 했어요. 그 회사에서는 끝까지 저를 잡으려고 했는데, 제가 이런 얘기까지 했죠. '너희들 회사에서 출시한 그 게임이 지금 출시된 지 딱 1년 반 된 내 스마트폰에서도 못 도는데 이게 말이 되냐?' 그러니까 자기들은 원래 최신 기종만 노릴 거고, 그리고 저수준(low-level)의 최적화를 위해 어셈블리(assembly)를 사용해 가면서 코드 베이스를 망치고 싶지 않다는 거예요.

근데 저는 어이가 없던 게 정말 말 그대로 배열(array)하고 해시 맵(hash map) 둘 중의 하나를 고르는 문제라면, 이건 성능의 문제지 코드 베이스를 망치는 거랑은 상관없는 문제거든요. 다만, 내가 게임을 제작하는 플랫폼의 하드웨어를 잘 이해하고 사용함으로 해서 섣부른 최적화(premature optimization)가 아닌 처음부터 하드웨어의 이해도가 있는 상태에서 상황에 맞게 코드나 알고리즘을 효율적으로 짜면 결과적으로 나중에 최적화할 일이 많이 없는 코드나 제품이 나올 수 있어요. 그래서 제 생각에는 이제 거기에 있는 프로그래머들이 개발자로서 훌륭한 마음가짐을 갖고 있고 자신들이 만드는 제품의 하드웨어의 이해도가 높았다면 저는 그때 그 회사의 게임도 (1년 반 전에 최신 기종이었던) 제 스마트폰에서 지금도 잘 돌아갈 거라고 생각을 해요.

어쨌든 그 사람은 기분이 상했는지 저에게 '내가 아마존에서 몇 년간 근무했고... 우리 애들은 학교에서 실력 좋은 애들만 데려오고... 인터뷰하는 내용의 수준도 페이스북 급이다'라고 말을 했는데... 실은 제가 페이스북 면접을 봤을 때도 이때랑 비슷했던 기억이 있거든요. 애들이 말 그대로 실용적이지 않고 학교 교재에 나오는... 그중에서 정말 실무에서도 전혀 쓰이지 않을 것 같은 그런 이상한 거 있잖아요... 되게 구석에 있는 내용인데 그걸 직접 파보지 않으면 알지도 못하고 쓸 일도 없는 그런 질문들을 엄청 물어봤었어요. 물론 저는 거기에서도 면접을 통과는 했었지만 결국에는 제가 안 간다고 했죠. '면접에서 그런 질문들이나 묻는 정도밖에 안 되는 회사라면 일하고 싶지 않다'라고 얘기를 했었는데 이 회사에서도 페이스북 얘기를 딱 듣는 순간 '그때와 다를 바 없구나...' 싶어서 나는 '내 갈 길 가겠다'라고 그러고 끝났죠.

이걸 통해 제가 하고 싶은 얘기는 '이제 하드웨어에 대한 이해는 필요가 없지 않나요?'라고 하시는 분들도 좀 계신데 제 생각에는 하드웨어를 이해하고 있는 쪽과 그렇지 않은 두 부류로 나뉠 것 같아요. 
출시한 게임이 대박이 나거나, 어느 시점에 서비스를 확장시켜야 할 때가 오면(동접자 수를 늘려야 한다던가) 이런 상황에서 하드웨어를 교체하거나 추가하지 않고도 소프트웨어적으로 최적화할 방법을 알고 있다면 개발 비용을 엄청 절약할 수 있어요. 그리고 이렇게 하려면 훌륭한, 탑 프로그래머로 성장해야 할 텐데 그러려면 결과적으로 자기가 개발하는 플랫폼을 잘 이해해야 할 수밖에 없어요. 그래서 이걸 위해서 따로 하드웨어를 공부하거나 그러실 필요는 없고, 알고리즘을 만들 때 빨리 도는지 느리게 도는지 측정을 해 가면서 프로그래밍 작성하는 습관을 만드세요. 그리고 이런 상황이 올 거예요. '어, 왜 해시 맵(hash map)이 더 느리지?' 그럼 그 이유를 찾고 문제를 해결해 나가고 하는 과정을 반복하다 보면 이게 실력으로 쌓이게 되는 거죠. 
초보 프로그래머라면 지금은 굳이 이걸 신경 쓰지 마시고요, 중급 정도 올라가시는 분들부터 어떤 알고리즘을 짰을 때, 측정을 통해서 과연 이게 다른 대안(alternative) 보다 더 빠른지 이런저런 고민을 해가면서 프로그래밍을 해 나간다면 확실히 몇 년 안에 하드웨어에 대한 이해가 높아지면서 어느 순간 '아 내가 정말 프로그래밍 잘하는구나' 이런 생각을 하실 날이 올 것 같아요.
